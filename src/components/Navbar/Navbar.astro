---
import Image from "astro/components/Image.astro";
import chevron from "#assets/icons/chevron.png";
import logo from "#assets/icons/logo.svg";
import Navlink, { type NavLinkProps } from "./Navlink.astro";

export const links: NavLinkProps[] = [
  { title: "Home", href: "/" },
  { title: "About", href: "/about" },
  { title: "Services", href: "/services" },
  { title: "People", href: "/people" },
  { title: "Insights", href: "/insights/1" },
  { title: "Contacts", href: "/contacts" },
];

interface Props {
  isTransparent?: boolean;
}

const { isTransparent } = Astro.props;
---

<nav
  class={`w-screen z-50 flex gap-10 items-center justify-between sm:justify-center fixed top-0 left-0 h-20 px-5 ${isTransparent ? "bg-transparent" : "bg-secondary"}`}
>
  <a href="/"
    ><Image src={logo} alt="Company logo" class="w-44 block sm:hidden" /></a
  >
  {/* Desktop Navigation */}
  <ul class="gap-7 hidden sm:flex">
    {links.map((l) => <Navlink title={l.title} href={l.href} />)}
  </ul>

  {/* Mobile Menu Button */}
  <button
    id="mobile-menu-button"
    class="p-2 sm:hidden"
    aria-label="Open navigation menu"
    aria-expanded="false"
    aria-controls="mobile-menu"
  >
    <svg class="w-6 h-6 stroke-primary" fill="none" viewBox="0 0 24 24">
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M4 6h16M4 12h16M4 18h16"></path>
    </svg>
  </button>
</nav>

{/* Mobile Sidebar */}
<div
  id="mobile-menu"
  class="fixed inset-y-0 right-0 w-64 bg-white shadow-xl z-50 transform transition-transform duration-300 ease-in-out translate-x-full"
>
  <div class="flex justify-end p-4">
    <button
      id="close-menu-button"
      class="p-2"
      aria-label="Close navigation menu"
    >
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>

  <nav class="px-4 py-2">
    <ul class="flex flex-col gap-4">
      {
        links.map((l) => (
          <li>
            <a
              href={l.href}
              class="block px-4 py-2  text-gray-700 hover:bg-gray-100 rounded-lg  font-neuelight transition-colors duration-200"
            >
              {l.title}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</div>

{/* Backdrop */}
<div
  id="backdrop"
  class="fixed inset-0 bg-black/50 z-40 hidden transition-opacity duration-300"
>
</div>

<script is:inline>
  const menuButton = document.getElementById("mobile-menu-button");
  const closeButton = document.getElementById("close-menu-button");
  const mobileMenu = document.getElementById("mobile-menu");
  const backdrop = document.getElementById("backdrop");

  function toggleMenu() {
    const isOpen = mobileMenu.classList.toggle("translate-x-full");
    backdrop.classList.toggle("hidden");
    document.body.classList.toggle("overflow-hidden");
    menuButton.setAttribute("aria-expanded", !isOpen);
  }

  // Toggle menu on button click
  [menuButton, closeButton, backdrop].forEach((element) => {
    element?.addEventListener("click", toggleMenu);
  });

  // Close menu on ESC key
  document.addEventListener("keydown", (e) => {
    if (
      e.key === "Escape" &&
      !mobileMenu.classList.contains("translate-x-full")
    ) {
      toggleMenu();
    }
  });

  // Close menu when clicking outside on mobile
  document.querySelectorAll("#mobile-menu a").forEach((link) => {
    link.addEventListener("click", toggleMenu);
  });

  // Scroll effect for navbar with fade animation
  const nav = document.querySelector("nav");
  function handleScroll() {
    if (window.scrollY > 0) {
      nav.classList.add("scrolled");
    } else {
      nav.classList.remove("scrolled");
    }
  }

  window.addEventListener("scroll", handleScroll);
  handleScroll(); // Initialize on load
</script>

<style>
  /* Smooth transitions for mobile menu */
  #mobile-menu {
    transition: transform 0.3s ease-in-out;
  }

  #backdrop {
    transition: opacity 0.3s ease-in-out;
  }

  nav::before {
    content: "";
    @apply absolute inset-0 bg-secondary/90 opacity-0 transition-opacity duration-300 backdrop-blur-md;
    z-index: -1;
  }

  nav.scrolled {
    @apply shadow-sm;
  }

  nav.scrolled::before {
    @apply opacity-100;
  }
</style>
